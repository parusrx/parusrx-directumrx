name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  SERVICE: directumrx
  IMAGE_NAME: directumrx
  DOTNET_VERSION: 6.0.x

jobs:
  BuildContainerForPR_Linux:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: ${{ env.DOTNET_QUALITY }}
      - name: Restore dependencies
        run: |
          dotnet restore DirectumRx.sln
      - name: Build
        run: |
          dotnet build DirectumRx.sln --no-restore
      - name: Test
        run: |
          dotnet test DirectumRx.sln --no-build --verbosity normal
      - name: Compose build
        shell: bash
        working-directory: .
        env:
          TAG: ${{ env.BRANCH }}
        run: |
          sudo -E docker compose build ${{ env.SERVICE }}

  BuildLinux:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: ${{ env.DOTNET_QUALITY }}
      - name: Restore dependencies
        run: |
          dotnet restore DirectumRx.sln
      - name: Build
        run: |
          dotnet build DirectumRx.sln --no-restore
      - name: Test
        run: |
          dotnet test DirectumRx.sln --no-build --verbosity normal
      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME  }}
          password: ${{ secrets.REGISTRY_PASSWORD  }}
      - name: Compose build
        shell: bash
        working-directory: .
        run: |
          sudo -E docker compose build ${{ env.SERVICE }}
      - name: Compose push
        shell: bash
        working-directory: .
        run: | 
          sudo -E docker compose push ${{ env.SERVICE }}
